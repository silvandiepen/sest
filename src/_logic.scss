@charset 'utf-8';
$has-warnings: false;
$test-results: null !default;

// extra-info
// --------------------------
/// Converts two values in extra information usable for debug purposes.
/// @access public
/// @group Ssst
/// @output Log
/// @parameter Strings

@function extra-info($value, $hide) {
	@if $hide {
		@return "";
	} @else {
		$return: "│   type: #{type-of($value)}";
		@if type-of($value) == "string" {
			$return: "#{$return}	│   length: #{str-length($value)}";
		}
		@if type-of($value) == "list" {
			$return: "#{$return}	│   length: #{length($value)}";
		}
		@return $return;
	}
}

// test
// --------------------------
/// Test mixin to show the title and description of a test
/// @access public
/// @group Ssst
/// @output Log
/// @parameter Strings

@mixin test($lines...) {
	$title: nth($lines, 1);
	$number: null;
	@if type-of(nth($lines, 1)) == "number" {
		$title: nth($lines, 2);
		$number: nth($lines, 1);
		$lines: offset-list($lines, 1);
	}

	@include log-start($number);

	@each $line in $lines {
		@include log-line($line);
	}

	// Set results
	$test-results: append($test-results, $title);
	@content;
}

// are-equal
// -------------------------
/// Check if are values are the same
/// @access public
/// @group Ssst
/// @output Log
/// @parameter Strings

@function are-equal($values) {
	// @debug length($values);
	// @debug $values;
	@if length($values) > 1 {
		@for $i from 2 through length($values) {
			@if nth($values, $i) != nth($values, $i - 1) {
				@return false;
			}
		}
		@return true;
	} @else {
		@warn 'are-equal needs atleast two values to check';
		@return false;
	}
}

// is-equal
// --------------------------
/// Check if two values are equal and throw errors if not.
/// @access public
/// @group Ssst
/// @output Log
/// @parameter Strings

@mixin is-equal($values...) {
	$valueList: ();
	@each $value in $values {
		$valueList: append($valueList, $value);
	}

	@if length($valueList) > 1 {
		@if are-equal($valueList) {
			@include log-results(true, null, $valueList);
		} @else {
			@include log-results(false, null, $valueList);
		}
	} @else {
		@warn 'Atleast 2 values must be given.';
	}
}

// is-not-equal
// --------------------------
/// Check if two values are equal and throw errors if not.
/// @access public
/// @group Ssst
/// @output Log
/// @parameter Strings

@mixin is-not-equal($values...) {
	@if length($values) > 1 {
		@if are-equal($values) == false {
			@include log-results(true, null, $values);
		} @else {
			@include log-results(false, null, $values);
		}
	} @else {
		@warn 'Atleast 2 values must be given.';
	}
}

// test-results
// --------------------------
/// Gather information from tests and display these. WIP
/// @access public
/// @group Ssst
/// @output Log
/// @parameter Strings

@mixin test-results($results) {
	$values: ();
	$values: append($values, " RESULTS: (#{length($results)})");

	@if length($results) > 0 {
		@debug $test-results;
		@each $result in $results {
			$values: append($values, $result);
		}
	}

	@include log-block($values);
}
