@charset 'utf-8';
@mixin log-line($v: null) {
	@debug "	│	#{$v}";
}
@mixin log-top() {
	@debug "	╭────────────────────";
	@include log-line;
}

@mixin log-numbered-top($v) {
	@debug "	╭─#{repeat('─',length($v))}─┬───";
	@debug "	│ #{$v} │";
	@debug "	├─#{repeat('─',length($v))}─┘";
}
@mixin log-end() {
	@include log-line;
	@debug "	╰─────────────────────────";
}
@mixin log-mid() {
	@include log-line;
	@debug "	├────────────────────";
	@include log-line;
}

@mixin log-start($number: null) {
	@if $number != null {
		@include log-numbered-top($number);
	} @else {
		@include log-top;
		@include log-line;
	}
}

@mixin log-block($v) {
	@if type-of($v) == "list" {
		$longest-string: 0;
		@each $val in $v {
			@if str-length($val) > $longest-string {
				$longest-string: str-length($val);
			}
		}

		@include log-start($longest-string);
		@each $val in $v {
			@include log-line($val, $longest-string);
		}
		@include log-end($longest-string);
	} @else {
		@include log-start(str-length($v));
		@include log-line($v, str-length($v));
		@include log-end(str-length($v));
	}
}

// test
// --------------------------
/// Test mixin to show the title and description of a test
/// @access public
/// @group Ssst
/// @output Log
/// @parameter Strings

@mixin log-results($passed, $expected: null, $values) {
	@if $passed == false {
		@include log-mid;
		@include log-line(
			"inserted: #{nth($values,1)} (#{type-of(nth($values,1))})"
		);
		@include log-mid;
		// Check if values is a list, if so, it means it should be compared. Show the differences.
		@if length($values) > 1 {
			@for $i from 1 through length($values) {
				@include log-line(
					"#{$i}: 	#{nth($values,$i)}	#{extra-info(nth($values,$i), $passed)}"
				);
			}

			$difference: diff(nth($values, 1), nth($values, 2));
			@include log-mid;
			@if type-of($difference) == "list" {
				@include log-line("difference:");
				@each $diff in $difference {
					@include log-line("#{$diff}");
				}
			} @else {
				@include log-line("difference: 	#{$difference}");
			}
			@include log-mid;
		}
		// Else, this is a string which is expected to be something else. Show what it is and what is expected.
		// @else {

		// }
	}

	// Just show the result;
	@else {
		@include log-line;
		@for $i from 1 through length($values) {
			@include log-line(
				"#{$i}: #{nth($values, $i)} (#{type-of(nth($values,$i))})"
			);
		}
		@include log-mid;
	}

	@if $passed == false {
		$has-warnings: true;
		@include log-line("[✕] Failed");
		@include log-end;
	} @else {
		@include log-line("[✔] Passed");
		@include log-end;
	}
}
